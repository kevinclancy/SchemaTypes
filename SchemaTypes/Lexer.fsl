{
module Lexer

// SUPER IMPORTANT SUPER IMPORTANT SUPER IMPORTANT
// Don't forget to run fslex with --unicode. Otherwise
// you will get confusing errors.

// Opens methods related to fslex.exe
open FSharp.Text.Lexing
open Parser
open System
//open System.Text

let mutable lastComment = ""

let newline (lexbuf : LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine in

let lexeme lexbuf = LexBuffer<byte>.LexemeString lexbuf in

/// Removes leading and trailing quotations from a quoted string
let removeQuotes (str : string) : string =
    str.Substring(1,str.Length-2)

}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule token = parse
| newline        { newline lexbuf ; lastComment <- "" ; token lexbuf  }
| whitespace     { token lexbuf }
| "("            { LPAREN }
| ")"            { RPAREN }
| "{"            { LBRACK }
| "}"            { RBRACK }
| "|"            { PIPE }
| ":"			 { COLON }
| "::"           { DOUBLECOLON }
| "=>"           { MAPSTO }
| "union"        { UNION }
| "let"          { LET }
| "in"           { IN }
| "="            { EQUAL }
| "prop"         { PROP }
| "prf"          { PROOF }
| "true"         { TRUE }
| "str"          { STR }
| "->"           { TO }
| ","            { COMMA }
| "["            { LSQUAREBRACK(lastComment) }
| "]"            { RSQUAREBRACK }
| "{|"           { LBARBRACK }
| "|}"           { RBARBRACK }
| "<"            { LANGLE }
| ">"            { RANGLE }
| "*"            { ASTERISK }
| "#"            { HASH }
| "!"            { BANG }
| ("//")         { lastComment <- "" ; comment lexbuf }
// For string literals, we chop off the leading and trailing quotation marks
| ['"'][^'"']*['"'] { STRLITERAL(lexeme lexbuf |> removeQuotes) }
| ['a'-'z''A'-'Z']['a'-'z''A'-'Z''1'-'9']* { ID(lastComment, lexeme lexbuf) }
| ['-']?digit+                             { INT (Int32.Parse(lexeme lexbuf)) }
| eof            { EOF }

and comment = parse
| newline whitespace* ("//") { newline lexbuf ; lastComment <- lastComment + "\n" ; comment lexbuf }
| newline { newline lexbuf ; token lexbuf} 
| _ { lastComment <- lastComment + (lexeme lexbuf); comment lexbuf }

