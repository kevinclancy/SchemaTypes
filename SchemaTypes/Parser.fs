// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Syntax
open ParseHelpers
open Utils


# 14 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LBRACK
  | RBRACK
  | JOIN
  | DOT
  | BACKSLASH
  | HASH
  | MAPSTO
  | COMMA
  | LBARBRACK
  | RBARBRACK
  | LANGLE
  | RANGLE
  | EOF
  | ASTERISK
  | TYPE
  | STR
  | PROP
  | PROOF
  | TO
  | LPAREN
  | RPAREN
  | COLON
  | TRUE
  | PIPE
  | RSQUAREBRACK
  | DOUBLECOLON
  | UNION
  | BANG
  | LET
  | IN
  | EQUAL
  | LSQUAREBRACK of (string)
  | STRLITERAL of (string)
  | INT of (int)
  | CHAR of (char)
  | ID of (string*string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_JOIN
    | TOKEN_DOT
    | TOKEN_BACKSLASH
    | TOKEN_HASH
    | TOKEN_MAPSTO
    | TOKEN_COMMA
    | TOKEN_LBARBRACK
    | TOKEN_RBARBRACK
    | TOKEN_LANGLE
    | TOKEN_RANGLE
    | TOKEN_EOF
    | TOKEN_ASTERISK
    | TOKEN_TYPE
    | TOKEN_STR
    | TOKEN_PROP
    | TOKEN_PROOF
    | TOKEN_TO
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_COLON
    | TOKEN_TRUE
    | TOKEN_PIPE
    | TOKEN_RSQUAREBRACK
    | TOKEN_DOUBLECOLON
    | TOKEN_UNION
    | TOKEN_BANG
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_EQUAL
    | TOKEN_LSQUAREBRACK
    | TOKEN_STRLITERAL
    | TOKEN_INT
    | TOKEN_CHAR
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startkind
    | NONTERM__startty
    | NONTERM__startindex
    | NONTERM__startsort
    | NONTERM_sort
    | NONTERM_Sort
    | NONTERM_IndAppList
    | NONTERM_SimpleIndex
    | NONTERM_index
    | NONTERM_Index
    | NONTERM_IndexList
    | NONTERM_kind
    | NONTERM_Kind
    | NONTERM_ty
    | NONTERM_Type
    | NONTERM_IdBinding
    | NONTERM_IdList
    | NONTERM_SimpleType
    | NONTERM_LetList
    | NONTERM_ApplicationSequence
    | NONTERM_Field
    | NONTERM_FieldList

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LBRACK  -> 0 
  | RBRACK  -> 1 
  | JOIN  -> 2 
  | DOT  -> 3 
  | BACKSLASH  -> 4 
  | HASH  -> 5 
  | MAPSTO  -> 6 
  | COMMA  -> 7 
  | LBARBRACK  -> 8 
  | RBARBRACK  -> 9 
  | LANGLE  -> 10 
  | RANGLE  -> 11 
  | EOF  -> 12 
  | ASTERISK  -> 13 
  | TYPE  -> 14 
  | STR  -> 15 
  | PROP  -> 16 
  | PROOF  -> 17 
  | TO  -> 18 
  | LPAREN  -> 19 
  | RPAREN  -> 20 
  | COLON  -> 21 
  | TRUE  -> 22 
  | PIPE  -> 23 
  | RSQUAREBRACK  -> 24 
  | DOUBLECOLON  -> 25 
  | UNION  -> 26 
  | BANG  -> 27 
  | LET  -> 28 
  | IN  -> 29 
  | EQUAL  -> 30 
  | LSQUAREBRACK _ -> 31 
  | STRLITERAL _ -> 32 
  | INT _ -> 33 
  | CHAR _ -> 34 
  | ID _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LBRACK 
  | 1 -> TOKEN_RBRACK 
  | 2 -> TOKEN_JOIN 
  | 3 -> TOKEN_DOT 
  | 4 -> TOKEN_BACKSLASH 
  | 5 -> TOKEN_HASH 
  | 6 -> TOKEN_MAPSTO 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_LBARBRACK 
  | 9 -> TOKEN_RBARBRACK 
  | 10 -> TOKEN_LANGLE 
  | 11 -> TOKEN_RANGLE 
  | 12 -> TOKEN_EOF 
  | 13 -> TOKEN_ASTERISK 
  | 14 -> TOKEN_TYPE 
  | 15 -> TOKEN_STR 
  | 16 -> TOKEN_PROP 
  | 17 -> TOKEN_PROOF 
  | 18 -> TOKEN_TO 
  | 19 -> TOKEN_LPAREN 
  | 20 -> TOKEN_RPAREN 
  | 21 -> TOKEN_COLON 
  | 22 -> TOKEN_TRUE 
  | 23 -> TOKEN_PIPE 
  | 24 -> TOKEN_RSQUAREBRACK 
  | 25 -> TOKEN_DOUBLECOLON 
  | 26 -> TOKEN_UNION 
  | 27 -> TOKEN_BANG 
  | 28 -> TOKEN_LET 
  | 29 -> TOKEN_IN 
  | 30 -> TOKEN_EQUAL 
  | 31 -> TOKEN_LSQUAREBRACK 
  | 32 -> TOKEN_STRLITERAL 
  | 33 -> TOKEN_INT 
  | 34 -> TOKEN_CHAR 
  | 35 -> TOKEN_ID 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startkind 
    | 1 -> NONTERM__startty 
    | 2 -> NONTERM__startindex 
    | 3 -> NONTERM__startsort 
    | 4 -> NONTERM_sort 
    | 5 -> NONTERM_Sort 
    | 6 -> NONTERM_Sort 
    | 7 -> NONTERM_Sort 
    | 8 -> NONTERM_Sort 
    | 9 -> NONTERM_Sort 
    | 10 -> NONTERM_Sort 
    | 11 -> NONTERM_IndAppList 
    | 12 -> NONTERM_IndAppList 
    | 13 -> NONTERM_SimpleIndex 
    | 14 -> NONTERM_SimpleIndex 
    | 15 -> NONTERM_SimpleIndex 
    | 16 -> NONTERM_index 
    | 17 -> NONTERM_Index 
    | 18 -> NONTERM_Index 
    | 19 -> NONTERM_IndexList 
    | 20 -> NONTERM_IndexList 
    | 21 -> NONTERM_kind 
    | 22 -> NONTERM_Kind 
    | 23 -> NONTERM_Kind 
    | 24 -> NONTERM_Kind 
    | 25 -> NONTERM_Kind 
    | 26 -> NONTERM_ty 
    | 27 -> NONTERM_Type 
    | 28 -> NONTERM_Type 
    | 29 -> NONTERM_IdBinding 
    | 30 -> NONTERM_IdBinding 
    | 31 -> NONTERM_IdList 
    | 32 -> NONTERM_IdList 
    | 33 -> NONTERM_SimpleType 
    | 34 -> NONTERM_SimpleType 
    | 35 -> NONTERM_SimpleType 
    | 36 -> NONTERM_SimpleType 
    | 37 -> NONTERM_SimpleType 
    | 38 -> NONTERM_SimpleType 
    | 39 -> NONTERM_SimpleType 
    | 40 -> NONTERM_SimpleType 
    | 41 -> NONTERM_SimpleType 
    | 42 -> NONTERM_SimpleType 
    | 43 -> NONTERM_SimpleType 
    | 44 -> NONTERM_SimpleType 
    | 45 -> NONTERM_LetList 
    | 46 -> NONTERM_LetList 
    | 47 -> NONTERM_ApplicationSequence 
    | 48 -> NONTERM_ApplicationSequence 
    | 49 -> NONTERM_ApplicationSequence 
    | 50 -> NONTERM_Field 
    | 51 -> NONTERM_FieldList 
    | 52 -> NONTERM_FieldList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | JOIN  -> "JOIN" 
  | DOT  -> "DOT" 
  | BACKSLASH  -> "BACKSLASH" 
  | HASH  -> "HASH" 
  | MAPSTO  -> "MAPSTO" 
  | COMMA  -> "COMMA" 
  | LBARBRACK  -> "LBARBRACK" 
  | RBARBRACK  -> "RBARBRACK" 
  | LANGLE  -> "LANGLE" 
  | RANGLE  -> "RANGLE" 
  | EOF  -> "EOF" 
  | ASTERISK  -> "ASTERISK" 
  | TYPE  -> "TYPE" 
  | STR  -> "STR" 
  | PROP  -> "PROP" 
  | PROOF  -> "PROOF" 
  | TO  -> "TO" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | COLON  -> "COLON" 
  | TRUE  -> "TRUE" 
  | PIPE  -> "PIPE" 
  | RSQUAREBRACK  -> "RSQUAREBRACK" 
  | DOUBLECOLON  -> "DOUBLECOLON" 
  | UNION  -> "UNION" 
  | BANG  -> "BANG" 
  | LET  -> "LET" 
  | IN  -> "IN" 
  | EQUAL  -> "EQUAL" 
  | LSQUAREBRACK _ -> "LSQUAREBRACK" 
  | STRLITERAL _ -> "STRLITERAL" 
  | INT _ -> "INT" 
  | CHAR _ -> "CHAR" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | BACKSLASH  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | MAPSTO  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LBARBRACK  -> (null : System.Object) 
  | RBARBRACK  -> (null : System.Object) 
  | LANGLE  -> (null : System.Object) 
  | RANGLE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | STR  -> (null : System.Object) 
  | PROP  -> (null : System.Object) 
  | PROOF  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | RSQUAREBRACK  -> (null : System.Object) 
  | DOUBLECOLON  -> (null : System.Object) 
  | UNION  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LSQUAREBRACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRLITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;0us;65535us;0us;65535us;0us;65535us;1us;65535us;6us;7us;21us;65535us;2us;34us;6us;8us;18us;34us;21us;23us;22us;24us;27us;28us;35us;29us;60us;30us;69us;31us;78us;34us;81us;34us;87us;32us;91us;34us;95us;34us;100us;33us;102us;34us;106us;34us;110us;34us;113us;34us;116us;34us;120us;34us;1us;65535us;45us;36us;8us;65535us;4us;44us;15us;44us;36us;37us;45us;38us;48us;44us;66us;44us;76us;44us;88us;44us;1us;65535us;4us;5us;6us;65535us;4us;42us;15us;16us;48us;47us;66us;115us;76us;47us;88us;89us;2us;65535us;48us;49us;76us;77us;1us;65535us;0us;1us;4us;65535us;0us;50us;57us;54us;62us;55us;93us;56us;1us;65535us;2us;3us;13us;65535us;2us;63us;18us;118us;78us;79us;81us;82us;87us;121us;91us;92us;95us;96us;102us;103us;106us;107us;110us;111us;113us;114us;116us;117us;120us;121us;2us;65535us;71us;70us;74us;70us;2us;65535us;71us;72us;74us;75us;13us;65535us;2us;65us;18us;65us;78us;65us;81us;65us;87us;65us;91us;65us;95us;65us;102us;65us;106us;65us;110us;65us;113us;65us;116us;65us;120us;65us;14us;65535us;2us;105us;18us;105us;78us;105us;81us;105us;87us;105us;91us;105us;95us;105us;102us;105us;106us;105us;110us;105us;111us;112us;113us;105us;116us;105us;120us;105us;1us;65535us;18us;66us;2us;65535us;73us;122us;123us;122us;2us;65535us;73us;84us;123us;124us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;2us;3us;4us;6us;28us;30us;39us;41us;48us;51us;53us;58us;60us;74us;77us;80us;94us;109us;111us;114us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;2us;1us;3us;1us;3us;2us;4us;10us;1us;4us;1us;5us;2us;5us;40us;1us;6us;2us;6us;41us;1us;7us;1us;8us;1us;8us;1us;9us;4us;9us;28us;37us;38us;1us;9us;4us;9us;37us;38us;42us;1us;9us;2us;9us;37us;2us;9us;10us;3us;9us;10us;37us;1us;9us;2us;9us;37us;1us;9us;2us;9us;10us;2us;10us;10us;2us;10us;25us;2us;10us;29us;3us;10us;36us;44us;2us;10us;39us;2us;10us;44us;1us;10us;2us;11us;18us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;16us;1us;17us;1us;18us;1us;18us;2us;19us;20us;1us;19us;1us;19us;2us;21us;24us;1us;21us;2us;22us;23us;1us;23us;2us;24us;24us;2us;24us;25us;2us;24us;38us;1us;24us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;1us;26us;1us;26us;1us;27us;3us;28us;47us;48us;1us;28us;2us;29us;30us;1us;29us;2us;31us;32us;1us;31us;1us;31us;4us;33us;34us;35us;36us;2us;33us;34us;2us;33us;34us;2us;33us;34us;1us;33us;1us;33us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;35us;1us;35us;2us;36us;50us;2us;36us;50us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;38us;1us;38us;1us;38us;1us;38us;1us;39us;1us;39us;1us;39us;1us;39us;1us;39us;1us;39us;1us;39us;1us;42us;1us;43us;1us;44us;1us;44us;1us;45us;1us;45us;1us;45us;1us;45us;1us;45us;1us;46us;1us;46us;1us;47us;1us;48us;1us;48us;1us;49us;1us;50us;1us;50us;1us;50us;2us;51us;52us;1us;51us;1us;51us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;19us;21us;23us;26us;28us;31us;33us;35us;37us;39us;44us;46us;51us;53us;56us;59us;63us;65us;68us;70us;73us;76us;79us;82us;86us;89us;92us;94us;97us;99us;101us;103us;105us;107us;109us;111us;113us;115us;117us;120us;122us;124us;127us;129us;132us;134us;137us;140us;143us;145us;147us;149us;151us;153us;155us;157us;159us;161us;165us;167us;170us;172us;175us;177us;179us;184us;187us;190us;193us;195us;197us;199us;201us;203us;205us;207us;209us;211us;214us;217us;219us;221us;223us;225us;227us;229us;231us;233us;235us;237us;239us;241us;243us;245us;247us;249us;251us;253us;255us;257us;259us;261us;263us;265us;267us;269us;271us;273us;275us;277us;279us;281us;283us;285us;288us;290us;|]
let _fsyacc_action_rows = 125
let _fsyacc_actionTableElements = [|2us;32768us;13us;52us;19us;58us;0us;49152us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;49152us;4us;32768us;19us;45us;22us;41us;32us;39us;35us;40us;0us;49152us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;0us;49152us;2us;32768us;12us;9us;18us;35us;0us;16388us;0us;16389us;11us;16389us;1us;16424us;7us;16424us;12us;16424us;14us;16424us;19us;16424us;20us;16424us;22us;16424us;27us;16424us;29us;16424us;32us;16424us;35us;16424us;0us;16390us;11us;16390us;1us;16425us;7us;16425us;12us;16425us;14us;16425us;19us;16425us;20us;16425us;22us;16425us;27us;16425us;29us;16425us;32us;16425us;35us;16425us;0us;16391us;4us;32768us;19us;45us;22us;41us;32us;39us;35us;40us;0us;16392us;1us;32768us;35us;19us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;20us;1us;32768us;21us;21us;2us;16426us;21us;22us;25us;93us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;2us;32768us;18us;35us;20us;25us;2us;32768us;18us;35us;20us;26us;1us;32768us;18us;27us;2us;32768us;6us;91us;18us;27us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;1us;16393us;18us;35us;1us;16394us;18us;35us;2us;32768us;18us;35us;20us;61us;1us;16413us;18us;35us;3us;32768us;6us;106us;18us;35us;23us;88us;2us;32768us;18us;35us;20us;101us;2us;32768us;6us;106us;18us;35us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;4us;32768us;20us;46us;22us;41us;32us;39us;35us;40us;0us;16395us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;1us;32768us;12us;43us;0us;16400us;0us;16401us;3us;32768us;22us;41us;32us;39us;35us;40us;0us;16402us;1us;16404us;7us;48us;4us;32768us;19us;45us;22us;41us;32us;39us;35us;40us;0us;16403us;2us;32768us;12us;51us;18us;57us;0us;16405us;1us;16406us;13us;53us;0us;16407us;1us;16408us;18us;57us;1us;16409us;18us;57us;2us;32768us;18us;57us;20us;94us;2us;32768us;13us;52us;19us;58us;1us;32768us;35us;59us;1us;32768us;21us;60us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;1us;32768us;18us;62us;2us;32768us;13us;52us;19us;58us;1us;32768us;12us;64us;0us;16410us;0us;16411us;6us;32768us;19us;45us;20us;67us;22us;41us;27us;116us;32us;39us;35us;40us;0us;16412us;1us;16414us;21us;69us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;1us;16416us;7us;71us;1us;32768us;35us;68us;0us;16415us;2us;32768us;31us;74us;35us;86us;1us;32768us;35us;68us;1us;32768us;24us;76us;5us;32768us;19us;45us;21us;81us;22us;41us;32us;39us;35us;40us;1us;32768us;21us;78us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;1us;32768us;1us;80us;0us;16417us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;1us;32768us;1us;83us;0us;16418us;1us;32768us;1us;85us;0us;16419us;1us;32768us;21us;87us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;4us;32768us;19us;45us;22us;41us;32us;39us;35us;40us;1us;32768us;1us;90us;0us;16420us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16421us;2us;32768us;13us;52us;19us;58us;1us;32768us;6us;95us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16422us;1us;32768us;19us;98us;1us;32768us;35us;99us;1us;32768us;21us;100us;5us;32768us;15us;10us;16us;14us;17us;15us;19us;17us;32us;12us;1us;32768us;6us;102us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16423us;0us;16426us;0us;16427us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16428us;1us;32768us;35us;109us;1us;32768us;30us;110us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;2us;32768us;14us;108us;29us;113us;0us;16429us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16430us;0us;16431us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16432us;0us;16433us;1us;32768us;21us;120us;10us;32768us;0us;73us;14us;108us;15us;11us;16us;14us;17us;15us;19us;18us;26us;97us;29us;113us;32us;13us;35us;104us;0us;16434us;1us;16436us;7us;123us;1us;32768us;35us;119us;0us;16435us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;15us;16us;21us;22us;28us;29us;32us;33us;34us;46us;47us;59us;60us;65us;66us;68us;79us;81us;84us;90us;96us;99us;102us;104us;107us;113us;115us;117us;120us;122us;126us;129us;132us;138us;143us;144us;145us;146us;147us;148us;150us;151us;152us;156us;157us;159us;164us;165us;168us;169us;171us;172us;174us;176us;179us;182us;184us;186us;192us;194us;197us;199us;200us;201us;208us;209us;211us;217us;219us;221us;222us;225us;227us;229us;235us;237us;248us;250us;251us;262us;264us;265us;267us;268us;270us;281us;286us;288us;289us;300us;301us;304us;306us;317us;318us;320us;322us;324us;330us;332us;343us;344us;345us;346us;357us;358us;360us;362us;373us;376us;377us;388us;389us;390us;401us;402us;403us;405us;416us;417us;419us;421us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;2us;1us;1us;1us;2us;7us;3us;2us;1us;1us;1us;1us;2us;1us;3us;3us;1us;2us;1us;2us;3us;7us;2us;1us;3us;3us;1us;3us;1us;8us;7us;3us;7us;7us;7us;8us;1us;1us;1us;1us;3us;5us;2us;2us;3us;1us;3us;3us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;4us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;7us;8us;9us;9us;10us;10us;11us;12us;12us;12us;12us;13us;14us;14us;15us;15us;16us;16us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;17us;18us;18us;19us;19us;19us;20us;21us;21us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;49152us;65535us;49152us;65535us;49152us;65535us;16388us;16389us;65535us;16390us;65535us;16391us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16395us;16396us;16397us;16398us;16399us;65535us;16400us;16401us;65535us;16402us;65535us;65535us;16403us;65535us;16405us;65535us;16407us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16410us;16411us;65535us;16412us;65535us;65535us;65535us;65535us;16415us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16417us;65535us;65535us;16418us;65535us;16419us;65535us;65535us;65535us;65535us;16420us;65535us;16421us;65535us;65535us;65535us;16422us;65535us;65535us;65535us;65535us;65535us;65535us;16423us;16426us;16427us;65535us;16428us;65535us;65535us;65535us;65535us;16429us;65535us;16430us;16431us;65535us;16432us;16433us;65535us;65535us;16434us;65535us;65535us;16435us;|]
let _fsyacc_reductions = lazy [|
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Kind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startkind));
# 361 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startty));
# 370 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Index in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startindex));
# 379 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Sort in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startsort));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Sort in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                       _1 
                   )
# 38 "Parser.fsy"
                 : Sort));
# 399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                  StString(parseState.ResultRange) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_Sort));
# 409 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                         StStringLit(_1, parseState.ResultRange) 
                   )
# 41 "Parser.fsy"
                 : 'gentype_Sort));
# 420 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                   StProp(parseState.ResultRange) 
                   )
# 42 "Parser.fsy"
                 : 'gentype_Sort));
# 430 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Index in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                          StProof(_2, parseState.ResultRange) 
                   )
# 43 "Parser.fsy"
                 : 'gentype_Sort));
# 441 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string*string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Sort in
            let _7 = parseState.GetInput(7) :?> 'gentype_Sort in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                                  StFun(snd _2, _4, _7, parseState.ResultRange) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_Sort));
# 454 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Sort in
            let _3 = parseState.GetInput(3) :?> 'gentype_Sort in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                           StFun("_", _1, _3, parseState.ResultRange) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_Sort));
# 466 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_IndAppList in
            let _2 = parseState.GetInput(2) :?> 'gentype_SimpleIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                           IndApp(_1, _2, parseState.ResultRange) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_IndAppList));
# 478 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_SimpleIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                _1 
                   )
# 48 "Parser.fsy"
                 : 'gentype_IndAppList));
# 489 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                IndStringLit(_1, parseState.ResultRange) 
                   )
# 50 "Parser.fsy"
                 : 'gentype_SimpleIndex));
# 500 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string*string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                        IndVar(snd _1, parseState.ResultRange) 
                   )
# 51 "Parser.fsy"
                 : 'gentype_SimpleIndex));
# 511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                          IndTrue(parseState.ResultRange) 
                   )
# 52 "Parser.fsy"
                 : 'gentype_SimpleIndex));
# 521 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Index in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                         _1 
                   )
# 54 "Parser.fsy"
                 : Index));
# 532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_SimpleIndex in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                           _1 
                   )
# 56 "Parser.fsy"
                 : 'gentype_Index));
# 543 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_IndAppList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                        _2 
                   )
# 57 "Parser.fsy"
                 : 'gentype_Index));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Index in
            let _3 = parseState.GetInput(3) :?> 'gentype_IndexList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                         _1 :: _3 
                   )
# 59 "Parser.fsy"
                 : 'gentype_IndexList));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Index in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                         [_1] 
                   )
# 60 "Parser.fsy"
                 : 'gentype_IndexList));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Kind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                       _1 
                   )
# 62 "Parser.fsy"
                 : Kind));
# 588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                       KProper(parseState.ResultRange) 
                   )
# 64 "Parser.fsy"
                 : 'gentype_Kind));
# 598 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                KProperPopulated(parseState.ResultRange) 
                   )
# 65 "Parser.fsy"
                 : 'gentype_Kind));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Kind in
            let _3 = parseState.GetInput(3) :?> 'gentype_Kind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                           KTyFun(_1, _3, parseState.ResultRange) 
                   )
# 66 "Parser.fsy"
                 : 'gentype_Kind));
# 620 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string*string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Sort in
            let _7 = parseState.GetInput(7) :?> 'gentype_Kind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                  KIndFun(snd _2, _4, _7, parseState.ResultRange) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_Kind));
# 633 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                     _1 
                   )
# 69 "Parser.fsy"
                 : Ty));
# 644 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_SimpleType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                         _1 
                   )
# 71 "Parser.fsy"
                 : 'gentype_Type));
# 655 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ApplicationSequence in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                _2 
                   )
# 72 "Parser.fsy"
                 : 'gentype_Type));
# 666 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string*string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Sort in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                 (snd _1, _3) 
                   )
# 75 "Parser.fsy"
                 : 'gentype_IdBinding));
# 678 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string*string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                      (snd _1, StString(parseState.ResultRange)) 
                   )
# 76 "Parser.fsy"
                 : 'gentype_IdBinding));
# 689 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_IdBinding in
            let _3 = parseState.GetInput(3) :?> 'gentype_IdList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                       _1 :: _3 
                   )
# 78 "Parser.fsy"
                 : 'gentype_IdList));
# 701 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_IdBinding in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                          [_1] 
                   )
# 79 "Parser.fsy"
                 : 'gentype_IdList));
# 712 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_IdList in
            let _5 = parseState.GetInput(5) :?> 'gentype_IndexList in
            let _7 = parseState.GetInput(7) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                                                        makeDictChain _3 (makeDictDom _5 _7) parseState.ResultRange 
                   )
# 81 "Parser.fsy"
                 : 'gentype_SimpleType));
# 726 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_IdList in
            let _6 = parseState.GetInput(6) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                                        makeAnonDictChain _3 _6 parseState.ResultRange 
                   )
# 82 "Parser.fsy"
                 : 'gentype_SimpleType));
# 739 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_FieldList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                      TyRecord(_2, parseState.ResultRange) 
                   )
# 83 "Parser.fsy"
                 : 'gentype_SimpleType));
# 750 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string*string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Sort in
            let _6 = parseState.GetInput(6) :?> 'gentype_Index in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                                     TyStringRef(snd _2, _4, _6, parseState.ResultRange) 
                   )
# 84 "Parser.fsy"
                 : 'gentype_SimpleType));
# 763 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string*string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Sort in
            let _7 = parseState.GetInput(7) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                                      TyIndAbs(snd _2, _4, _7, parseState.ResultRange) 
                   )
# 85 "Parser.fsy"
                 : 'gentype_SimpleType));
# 776 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string*string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Kind in
            let _7 = parseState.GetInput(7) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                                            TyTyAbs(snd _2, _4, _7, parseState.ResultRange) 
                   )
# 86 "Parser.fsy"
                 : 'gentype_SimpleType));
# 789 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string*string in
            let _5 = parseState.GetInput(5) :?> 'gentype_Sort in
            let _8 = parseState.GetInput(8) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                            TyUnion(TyIndAbs(snd _3, _5, _8, parseState.ResultRange), parseState.ResultRange)  
                   )
# 87 "Parser.fsy"
                 : 'gentype_SimpleType));
# 802 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                  TyStringRef("_", StString(parseState.ResultRange), IndTrue(parseState.ResultRange), parseState.ResultRange) 
                   )
# 88 "Parser.fsy"
                 : 'gentype_SimpleType));
# 812 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                         TyStringRef("_", StStringLit(_1, parseState.ResultRange), IndTrue(parseState.ResultRange), parseState.ResultRange) 
                   )
# 89 "Parser.fsy"
                 : 'gentype_SimpleType));
# 823 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string*string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                 TyVar(snd _1, parseState.ResultRange) 
                   )
# 90 "Parser.fsy"
                 : 'gentype_SimpleType));
# 834 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_LetList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                      _1 
                   )
# 91 "Parser.fsy"
                 : 'gentype_SimpleType));
# 845 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Sort in
            let _3 = parseState.GetInput(3) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                               TyIndAbs("_", _1, _3, parseState.ResultRange) 
                   )
# 92 "Parser.fsy"
                 : 'gentype_SimpleType));
# 857 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string*string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Type in
            let _5 = parseState.GetInput(5) :?> 'gentype_LetList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                            TyLet(snd _2, _4, _5, parseState.ResultRange) 
                   )
# 94 "Parser.fsy"
                 : 'gentype_LetList));
# 870 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                         _2 
                   )
# 95 "Parser.fsy"
                 : 'gentype_LetList));
# 881 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ApplicationSequence in
            let _2 = parseState.GetInput(2) :?> 'gentype_Index in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                       TyIndApp(_1, _2, parseState.ResultRange) 
                   )
# 97 "Parser.fsy"
                 : 'gentype_ApplicationSequence));
# 893 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ApplicationSequence in
            let _3 = parseState.GetInput(3) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                           TyTyApp(_1, _3, parseState.ResultRange) 
                   )
# 98 "Parser.fsy"
                 : 'gentype_ApplicationSequence));
# 905 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                  _1 
                   )
# 99 "Parser.fsy"
                 : 'gentype_ApplicationSequence));
# 916 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string*string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                             (snd _1, _3) 
                   )
# 101 "Parser.fsy"
                 : 'gentype_Field));
# 928 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Field in
            let _3 = parseState.GetInput(3) :?> 'gentype_FieldList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                         _1 :: _3 
                   )
# 103 "Parser.fsy"
                 : 'gentype_FieldList));
# 940 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Field in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                         [_1] 
                   )
# 104 "Parser.fsy"
                 : 'gentype_FieldList));
|]
# 952 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let kind lexer lexbuf : Kind =
    engine lexer lexbuf 0 :?> _
let ty lexer lexbuf : Ty =
    engine lexer lexbuf 2 :?> _
let index lexer lexbuf : Index =
    engine lexer lexbuf 4 :?> _
let sort lexer lexbuf : Sort =
    engine lexer lexbuf 6 :?> _
